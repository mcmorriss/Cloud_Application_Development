{
	"info": {
		"_postman_id": "0c6e10ff-dd1c-46e1-9859-1d9ad323faa5",
		"name": "CS493-Project2-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23783948"
	},
	"item": [
		{
			"name": "Test #1 - 30 Gists returned.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Test 1.1 - Return status 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 1.2 - At least 30 public Gists returned.\r",
							"pm.test(\"At least 30 public Gists returned. \", function () {\r",
							"    pm.expect(pm.response.json()).to.have.lengthOf.above(29);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/public",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"public"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #2 - User `wolfordj` has at least one gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 2.1 - Return status 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2.2 - User returns at least 1 gist.\r",
							"pm.test(\"User `wolfordj` has least one public Gist\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.lengthOf.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/users/wolfordj/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"wolfordj",
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #3.1 - Get number of requests.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"3.1 - Get length of response to check after.\", function () {\r",
							"    pm.environment.set(\"numGists\", pm.response.json().length);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #3.2 - Create new gist for user.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 3.1 - Return status 200.\r",
							"pm.test(\"3.2 - Creation successful: Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"create_description\", pm.response.json()[\"description\"]);\r",
							"    pm.environment.set(\"create_public\", pm.response.json()[\"public\"]);\r",
							"    pm.environment.set(\"create_file_names\", Object.keys(pm.response.json()[\"files\"]));\r",
							"    pm.environment.set(\"create_file_count\", Object.keys(pm.response.json()[\"files\"]).length);\r",
							"    pm.environment.set(\"create_id\", pm.response.json()[\"id\"]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"Hello World Examples\",\r\n    \"public\": true,\r\n    \"files\": {\r\n        \"hello_world2.txt\": {\r\n            \"content\": \"This is text now and conosle.log('Hello World');\"\r\n        },\r\n        \"hello_world.js\": {\r\n            \"content\": \"conosle.log('Hello World');\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #3.3 - Get updated number of requests.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"3.3 - Number of gists created has incremented by one.\", function () {\r",
							"    var newGists = pm.response.json().length;\r",
							"    pm.expect(newGists).to.equal(pm.environment.get(\"numGists\") + 1);\r",
							"\r",
							"    pm.environment.set(\"newGists\", newGists);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #4 - Confirm new Gist contents match request contents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4.1 - Checking file description matches new Gist.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"description\"]).to.eql(pm.environment.get(\"create_description\"));\r",
							"});\r",
							"\r",
							"pm.test(\"4.2 - Checking public option matches new Gist.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"public\"]).to.eql(pm.environment.get(\"create_public\"));\r",
							"});\r",
							"\r",
							"pm.test(\"4.3 - Checking number of files added matches new Gist.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData[\"files\"]).length).to.eql(pm.environment.get(\"create_file_count\"));\r",
							"});\r",
							"\r",
							"pm.test(\"4.4 - Checking file names added match new Gist.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData[\"files\"])).to.eql(pm.environment.get(\"create_file_names\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #5.1 - Patch existing Gist description.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test #5 - You can edit the description of an existing Gist.\r",
							"pm.test(\"5.1 - Successful PATCH request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.code).to.be.eql(200);\r",
							"    pm.environment.set(\"updated_description\", jsonData[\"description\"]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"This is a new, updated description using a PATCH request.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #5.2 - Confirmation that contents of Gist are updated.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"5.2 - Contents of updated Gist match PATCH request contents.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"description\"]).to.equal(pm.environment.get(\"updated_description\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #6.1 - Check that Gist created is unstarred.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"6.1 - Status code 404 means gist is unstarred.\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #6.2 - Add a star to the Gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"6.2 - Status code 204 indicates star has been added to Gist.\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #6.3 - Check that Gist has star added.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"6.3 - Status code 204 means Gist has been starred.\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #7 - Confirm starred Gists list contains new Gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"7.1 - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"7.2 - Starred list contains gist starred in Test #6.\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"create_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/starred",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"starred"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #8.1 - Verify Gist is starred.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"8.1 - Status code 204 means Gist is starred.\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #8.2 - Removing the star from the Gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"8.2 - Status code 204 indicates star has been removed from the Gist.\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #8.3 - Verify Gist is now unstarred.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"8.3 - Status code 404 means gist is unstarred.\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #9.1 - Verify Gist exists.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"9.1 - Status code 200 indicates that Gist exists.\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #9.2 - Deleting the Gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"9.2 - Status code 204 indicates that Gist has been deleted.\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test #9.3 - Verify that Gist no longer exists.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"9.3 - Status code 404 indicates that Gist does not exist, & has been deleted.\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{create_id}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{create_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}